// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockShorturl is a mock of Shorturl interface.
type MockShorturl struct {
	ctrl     *gomock.Controller
	recorder *MockShorturlMockRecorder
}

// MockShorturlMockRecorder is the mock recorder for MockShorturl.
type MockShorturlMockRecorder struct {
	mock *MockShorturl
}

// NewMockShorturl creates a new mock instance.
func NewMockShorturl(ctrl *gomock.Controller) *MockShorturl {
	mock := &MockShorturl{ctrl: ctrl}
	mock.recorder = &MockShorturlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShorturl) EXPECT() *MockShorturlMockRecorder {
	return m.recorder
}

// Shorten mocks base method.
func (m *MockShorturl) Shorten(url string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shorten", url)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Shorten indicates an expected call of Shorten.
func (mr *MockShorturlMockRecorder) Shorten(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shorten", reflect.TypeOf((*MockShorturl)(nil).Shorten), url)
}

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// CreateBucket mocks base method.
func (m *MockRepo) CreateBucket(BucketName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBucket", BucketName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBucket indicates an expected call of CreateBucket.
func (mr *MockRepoMockRecorder) CreateBucket(BucketName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBucket", reflect.TypeOf((*MockRepo)(nil).CreateBucket), BucketName)
}

// Get mocks base method.
func (m *MockRepo) Get(BucketName, short string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", BucketName, short)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepoMockRecorder) Get(BucketName, short interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepo)(nil).Get), BucketName, short)
}

// Set mocks base method.
func (m *MockRepo) Set(short, fullurl string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", short, fullurl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockRepoMockRecorder) Set(short, fullurl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRepo)(nil).Set), short, fullurl)
}
